#+TITLE: Device file system
#+PROPERTY: header-args :tangle yes


#+BEGIN_SRC asm
#define devfs_name         0
#define devfs_entryDriver  8
#define devfs_number      10
#define devfs_data        11

#define dev_fileTableDirEntry fileTableData ;Pointer to entry in devfs
#define dev_fileTableNumber   dev_fileTableDirEntry + 2
#define dev_fileTableData     dev_fileTableNumber + 1

#define devfsEntrySize 16
#define devfsEntries   32

;; Device filesystem
#code ROM

devfs_fsDriver:
    DEFW devfs_init
    DEFW devfs_open
    DEFW 0x0000 ;devfs_close
    DEFW devfs_readdir
    DEFW devfs_fstat
    DEFW 0x0000 ;devfs_unlink

devfs_fileDriver:
    DEFW 0x0000 ;devfs_read
    DEFW 0x0000 ;devfs_write
#+END_SRC

#+BEGIN_SRC asm
#data RAM
devfsRoot:           defs devfsEntrySize * devfsEntries
devfsRootTerminator: defs 1
#code ROM
#+END_SRC

* Helper routines
** addDev
#+BEGIN_SRC asm
devfs_addDev:
;; Add a new device entry
;;
;; Input:
;; : (hl) - name
;; : de - driver address
;; : a - number / port
;;
;; Output:
;; : carry - unable to create entry
;; : nc - no error
;; : hl - custom data start

#local
    push af
    push de
    push hl

    ;find free entry
    ld a, 0
    ld hl, devfsRoot
    ld de, devfsEntrySize
    ld b, devfsEntries

findEntryLoop:
    cp (hl)
    jr z, freeEntryFound
    add hl, de
    djnz findEntryLoop

    ;no free entry found
    pop hl
    pop hl
    pop hl
    scf
    ret

freeEntryFound:
    ;hl = entry

    ;copy filename
    pop de ;name
    ex de, hl
    ld bc, 8
    ldir
    ex de, hl

    ;register driver address
    pop de ;driver address
    ld b, d
    ld c, e
    ;bc = device driver
    inc de
    inc de
    ;de = file driver
    ld (hl), e
    inc hl
    ld (hl), d
    inc hl

    ;dev number
    pop af
    ld (hl), a
    inc hl

    push hl ;custom data start

    ;call init function if it exists
    ld a, (bc)
    ld l, a
    inc bc
    ld a, (bc)
    ld h, a
    xor a
    cp h
    jr nz, callInit
    cp l
    jr z, return
callInit:
    ld bc, return
    push bc
    jp (hl)
return:

    pop hl ;custom data start

    or a
    ret
#endlocal
#+END_SRC

** addExpCard
#+BEGIN_SRC asm
devfs_addExpCard:
;; Add an entry for an expansion card to the devfs and initialise the module.
;; Should eventually also read the eeprom and handle driver loading somehow.
;;
;; Input:
;; : b - expansion slot number
;; : de - device driver (temporary)

#local
    ;TODO check if card is inserted; read the eeprom; evt. load driver; needs unio driver

    ;calculate port
    ;port = $80 + n * 16
    xor a
    cp b
    jr z, portFound
    ld a, 7
    cp b
    jr c, error ;invalid slot number

    ld a, 0x80
portLoop:
    add a, 16
    djnz portLoop
portFound:

    call devfs_addDev
    jr c, error

error:
    ret
#endlocal
#+END_SRC

** scanPartitions
#+BEGIN_SRC asm
devfs_scanPartitions:
;; Check if a block device is partioned and add each partition to :DEV/.
;;
;; Open device, check if partitioned, read partition table
;; Copy existing entry, add number to name, add offset (driver agnostic?)
;;
;; Input:
;; : (hl) - name of base device
#+END_SRC

** statFromEntry
#+BEGIN_SRC asm
devfs_statFromEntry:
;; Creates a stat from a directory entry.
;;
;; Input:
;; : (hl) - dir entry
;; : (de) - stat

    ;copy name
    push de
    call strcpy
    pop de
    ex de, hl
    ;(hl) = stat, (de) = dirEntry
    ld bc, STAT_ATTRIB
    add hl, bc
    ;(hl) = stat_attrib
    ;TODO store actual attribs
    ld (hl), SP_READ | SP_WRITE | ST_CHAR

    ;file size is unspecified

    xor a
    ret
#+END_SRC

* Init
#+BEGIN_SRC asm
#code ROM

devfs_init:
;; Adds all permanently attached devices
#local
    ;ft240
    ld hl, tty0name
    ld de, ft240_deviceDriver
    ld a, 0
    call devfs_addDev


    ld hl, sdaName
    ld de, sd_deviceDriver
    ld a, 0x80
    call devfs_addDev

    ;; ld hl, vgattyName
    ;; ld de, vt100_deviceDriver
    ;; ld a, 0x90
    ;; call devfs_addDev


    xor a
    ret


tty0name:
    DEFM "TTY0", 0x00
sdaName:
    DEFM "SDA", 0x00
vgattyName:
    DEFM "VGATTY", 0x00
#endlocal

#+END_SRC

* Fstat
#+BEGIN_SRC asm
#code ROM

devfs_fstat:
;; Get information about a file.
;;
;; Input:
;; : ix - file entry addr
;; : (de) - stat
;;
;; Output:
;; : a - errno

#local
    ;check if root dir
    ld a, (ix + dev_fileTableDirEntry)
    cp 0x00
    jr nz, notRootDir
    ld a, (ix + dev_fileTableDirEntry + 1)
    cp 0x00
    jr z, rootDir

notRootDir:
    ld b, ixh
    ld c, ixl
    ld hl, dev_fileTableDirEntry
    add hl, bc
    ;hl points to dirEntry
    jp devfs_statFromEntry

rootDir:
    xor a
    ld (de), a ;name = null
    ld hl, STAT_ATTRIB
    add hl, de
    ;TODO permission of drive
    ld (hl), SP_READ | SP_WRITE | ST_DIR
    ;file size is unspecified
    ;a = 0
    ret
#endlocal

#+END_SRC

* Open
#+BEGIN_SRC asm
#code ROM

devfs_open:
;; Open a device file
;;
;; Input:
;; : ix - table entry
;; : (de) - absolute path
;;
;; Output:
;; : a - errno

; Errors: 0=no error
;         4=no matching file found

#local
    ld a, (de)
    cp 0x00
    jr nz, notRootDir
    ;root directory

    ;store file driver
    ld a, devfs_fileDriver & 0xff
    ld (ix + fileTableDriver), a
    ld a, devfs_fileDriver >> 8
    ld (ix + fileTableDriver + 1), a

    ;store size
    ld de, devfsEntries * devfsEntrySize
    ld b, ixh
    ld c, iyl
    ld hl, fileTableSize
    add hl, bc
    call ld16

    ;set type to directory
    ld a, (ix + fileTableMode)
    or M_DIR
    ld (ix + fileTableMode), a

    ;set dirEntry pointer to 0 to indicate root dir
    xor a
    ld (ix + dev_fileTableDirEntry), a
    ld (ix + dev_fileTableDirEntry + 1), a

    ret


notRootDir:
    ld hl, devfsRoot
    push de ;path
    push hl ;file entry
    ld b, 8
    call strncmp
    jr z, fileFound

fileSearchLoop:
    ld de, devfsEntrySize
    pop hl ;file entry
    add hl, de
    pop de ;path
    ld a, (hl)
    cp 0
    jr z, invalidFile
    push de ;path
    push hl ;file entry
    ld b, 8
    call strncmp
    jr nz, fileSearchLoop

fileFound:
    pop iy ;pointer to devfs file entry
    pop de ;path, not needed anymore

    ;copy file information
    ld a, (iy + devfs_entryDriver)
    ld (ix + fileTableDriver), a
    ld a, (iy + devfs_entryDriver + 1)
    ld (ix + fileTableDriver + 1), a

    ld a, (iy + devfs_number)
    ld (ix + dev_fileTableNumber), a

    ;copy custom data
    ld bc, devfsEntrySize - devfs_data
    ld d, ixh
    ld e, ixl
    ld hl, dev_fileTableData
    add hl, de
    push hl
    ld d, iyh
    ld e, iyl
    ;store dirEntry pointer while we have a pointer in a register
    ld (ix + dev_fileTableDirEntry), e
    ld (ix + dev_fileTableDirEntry + 1), d
    ld hl, devfs_data
    add hl, de
    pop de
    ldir

    ;store filetype TODO add distincion between char and block devs
    ld a, (ix + fileTableMode)
    or M_CHAR
    ld (ix + fileTableMode), a

    ;operation succesful
    xor a
    ret

invalidFile:
    ld a, 4
    ret
#endlocal

#+END_SRC

* Readdir
#+BEGIN_SRC asm
#code ROM

devfs_readdir:
;; Get information about the next file in a directory.
;;
;; Input:
;; : a - dirfd
;; : (de) - stat
;;
;; Output:
;; : a - errno

#local
    push af

    ;check if root dir
    ld a, (ix + dev_fileTableDirEntry)
    cp 0x00
    jr nz, error
    ld a, (ix + dev_fileTableDirEntry + 1)
    cp 0x00
    jr nz, error

    ld c, (ix + fileTableOffset)
    ld b, (ix + fileTableOffset + 1)
    ld hl, devfsRoot
    add hl, bc

    xor a
    cp (hl)
    jr z, error ;end of dir

    ;seek to next entry
    pop af
    push de
    push hl
    ld de, devfsEntrySize
    ld h, SEEK_CUR
    call k_seek
    pop hl
    pop de

    ;hl points to dirEntry
    jp devfs_statFromEntry


error:
    pop af
    ld a, 1
    ret
#endlocal

#+END_SRC
