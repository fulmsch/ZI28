#+TITLE: Virtual file system
#+PROPERTY: header-args :tangle yes

* File Table
The file table contains an entry for each open file.

Fields:
| Name             | Bytes | Description                                                                        |
|------------------+-------+------------------------------------------------------------------------------------|
| ~ft_tableMode~   |     1 | ~0x00~ for an empty entry, or a combination of mode flags as defined in ~sys/os.h~ |
| ~ft_refCount~    |     1 | The number of file descriptors pointing to this file                               |
| ~ft_driveNumber~ |     1 |                                                                                    |
| ~ft_driver~      |     2 | Pointer to the file driver                                                         |
| ~ft_offset~      |     4 | Current offset                                                                     |
| ~ft_size~        |     4 | The file size                                                                      |
| ~ft_data~        |    19 | Area for the file driver to store data in                                          |
|------------------+-------+------------------------------------------------------------------------------------|

#+BEGIN_SRC asm
#define fileTableEntrySize 32
#define fileTableEntries   32

#define fileTableMode        0                        ;1 byte
#define fileTableRefCount    fileTableMode + 1        ;1 byte
#define fileTableDriveNumber fileTableRefCount + 1    ;1 byte
#define fileTableDriver      fileTableDriveNumber + 1 ;2 bytes
#define fileTableOffset      fileTableDriver + 2      ;4 bytes
#define fileTableSize        fileTableOffset + 4      ;4 bytes
                                                      ;-------
                                               ;Total 13 bytes
#define fileTableData        fileTableSize + 4  ;Max   19 bytes
#+END_SRC


#+BEGIN_SRC asm
#define file_read  0
#define file_write 2

#data RAM
    ;; TODO optimize the placement of the tables?
    .align 256
fileTable:
    defs fileTableEntries * fileTableEntrySize

#define fdTableEntries 32
k_fdTable:
    defs fdTableEntries
u_fdTable:
    defs fdTableEntries

#code ROM
#+END_SRC

* Helper routines
** fdToFileEntry

#+BEGIN_SRC asm
fdToFileEntry:
;; Finds the file entry of a given fd
;;
;; Input:
;; : a - file descriptor
;;
;; Output:
;; : hl - table entry address
;; : carry - error
;; : nc - no error

#local
    call getFdAddr
    ret c
    ld a, (hl)
    ;a = file table index
    jp getFileAddr

error:
    scf
    ret
#endlocal
#+END_SRC

** getFdAddr

#+BEGIN_SRC asm
getFdAddr:
;; Get the address of a file descriptor
;;
;; Input:
;; : a - fd
;;
;; Output:
;; : hl - fd address
;; : carry - error
;; : nc - no error
;;
;; Destroyed:
;; : a, hl, de

#local
    ;check if fd in range
    cp fdTableEntries*2
    jr nc, error

    ld hl, k_fdTable
    ;a = fd
    ;hl = fd table base addr
    ld d, 0
    ld e, a
    add hl, de ;this should reset the carry flag
    ret

error:
    scf
    ret
#endlocal
#+END_SRC

** getFileAddr

#+BEGIN_SRC asm
getFileAddr:
;; Finds the file entry of a given fd
;;
;; Input:
;; : a - file descriptor
;;
;; Output:
;; : hl - table entry address
;; : carry - out of bounds
;; : nc - no error
;;
;; See also:
;; : [getTableAddr](drive.asm.html#getTableAddr)

    ;TODO optimise by using an aligned table and bitshifts

    ld hl, fileTable
    ld de, fileTableEntrySize
    ld b, fileTableEntries
    jp getTableAddr
#+END_SRC

* Open
#+BEGIN_SRC asm
#code ROM

u_open:
    ld hl, u_fdTable
    ld c, fdTableEntries
    call open
    ; e -= fdTableEntries
    push af
    ld a, e
    sub fdTableEntries
    ld e, a
    pop af
    ret

k_open:
;; Open a file / device file
;;
;; Creates a new file table entry and returns the corresponding fd
;;
;; Exactly one of the following flags must be set:
;;
;; * `O_RDONLY` : Open for reading only.
;; * `O_WRONLY` : Open for writing only.
;; * `O_RDWR` : Open for reading and writing.
;;
;; Additionally, zero or more of the following flags may be specified:
;;
;; * `O_APPEND` : Before each write, the file offset is positioned at the
;; end of the file.
;; * `O_DIRECTORY` : Causes open to fail if the specified file is not a
;; directory.
;; * `O_TRUNC` : (Planned) If the file exists and is opened for writing, its size gets
;; truncated to 0.
;; * `O_CREAT` : (Planned) If the file doesn't exist, create it.
;; * `O_EXCL` : (Planned) If used in conjunction with O_CREAT, this call only
;; succeeds if the file doesn't already exist.
;;
;; Before calling the filesystem routine, the mode field gets populated with
;; the requested access flags. The filesystem routine should return with an
;; error if the required permissions are missing. On success it should bitwise
;; OR the filetype with the mode.
;;
;; Input:
;; : (de) - pathname
;; : a - flags
;;
;; Output:
;; : e - file descriptor
;; : a - errno
;Errors: 0=no error
;        1=maximum allowed files already open
;        2=invalid drive number
;        3=invalid path
;        4=no matching file found
;        5=file too large

    ld hl, k_fdTable
    ld c, 0

open:
;; Input:
;; : hl - base address of fd-table
;; : c - base fd
;; : (de) - pathname
;; : a - flags
;;
;; Output:
;; : e - file descriptor
;; : a - errno

#local
    ld (open_mode), a
    ld (open_path), de

    ld a, 0xff
    ld b, fdTableEntries
fdSearchLoop:
    cp (hl)
    jr z, fdFound
    inc c
    inc hl
    djnz fdSearchLoop

    ;no free fd
    ld a, 0xe0 ;TODO errno
    ret

fdFound:
    ld a, c
    ld (open_fd), a

    ;search free file table spot
    ld ix, fileTable
    ld b, fileTableEntries
    ld c, 0
    ld de, fileTableEntrySize

tableSearchLoop:
    ld a, (ix + 0)
    cp 00h
    jr z, tableSpotFound
    add ix, de
    inc c
    djnz tableSearchLoop

    ;no free spot found, return error
    ld a, 0xf0 ;TODO errno
    ret

tableSpotFound:
    ld a, c
    ld (open_fileIndex), a


    ld hl, (open_path)
    call realpath
    ;(hl) = absolute path

    call get_drive_and_path
    ;(de) = drive entry
    ;(hl) = relative path

    ld (open_path), hl
    ld a, e
    ld (open_drive), a

    add a, driveTableFsdriver
    ld e, a
    ex de, hl
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl ;hl = fsdriver address

    and a ;clear carry flag
    ld de, 0
    sbc hl, de
    jr z, invalidDrive;NULL pointer
    ld de, fs_open
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl

    ;store requested permissions
    ld a, (open_mode)
    ld b, a
    xor a
    bit O_RDONLY_BIT, b
    jr nz, skipWriteFlag
    ld a, M_WRITE
skipWriteFlag:
    bit O_WRONLY_BIT, b
    jr nz, skipReadFlag
    or M_READ
skipReadFlag:
    bit O_APPEND_BIT, b
    jr z, skipAppendFlag
    or M_APPEND
skipAppendFlag:
    ld (ix + fileTableMode), a


    ld a, (open_drive)
    ld (ix + fileTableDriveNumber), a
    xor a
    ld (ix + fileTableOffset + 0), a
    ld (ix + fileTableOffset + 1), a
    ld (ix + fileTableOffset + 2), a
    ld (ix + fileTableOffset + 3), a

    push ix
    ld de, return
    push de
    ld de, (open_path)
    ld a, (open_mode)

    jp (hl)

return:
    pop ix
    cp 0
    jr nz, error

    ld a, (open_mode)
    bit O_DIRECTORY_BIT, a
    jr z, success
    ;check if directory
    ld a, (ix + fileTableMode)
    bit M_DIR_BIT, a
    jr z, error ;not a directory

success:
    ld (ix + fileTableRefCount), 1
    ld a, (open_fileIndex)
    push af ;file index
    ld a, (open_fd)
    push af ;fd
    call getFdAddr
    pop af ;fd
    ld e, a
    pop af ;file index
    ld (hl), a
    xor a
    ret

error:
    ;error, clear the file entry
    ld (ix + fileTableMode), 0
    ld a, 1
    ret


invalidDrive:
    ld a, 0xf4
    ret
invalidPath:
    ld a, 0xf5
    ret
#endlocal


#data RAM
open_mode:      defs 1
open_fd:        defs 1
open_fileIndex: defs 1
open_path:      defs 2
open_drive:     defs 1
#+END_SRC

* Close
#+BEGIN_SRC asm
#code ROM

u_close:
    add a, fdTableEntries

k_close:
;; Close a file
;;
;; Closes a file descriptor. If the file has no more references, it gets closed too.
;;
;; Input:
;; : a - file descriptor
;;
;; Output:
;; : a - errno
;Errors: 0=no error
;        1=invalid file descriptor

#local
    call getFdAddr
    jr c, invalidFd
    ld a, (hl)
    ;check if fd exists
    cp 0xff
    jr z, invalidFd
    ld (hl), 0xff
    call getFileAddr

    inc hl
    dec (hl)
    ret nz ;more references to the file
    dec hl

    xor a
    ld b, fileTableEntrySize
clearEntry:
    ld (hl), a
    inc hl
    djnz clearEntry

    xor a
    ret

invalidFd:
    ld a, 1
    ret
#endlocal
#+END_SRC

* Read
#+BEGIN_SRC asm
#code ROM

u_read:
    add a, fdTableEntries

k_read:
;; Attempts to read up to count bytes from a file descriptor into a buffer.
;;
;; On files that support seeking, the read operation commences at the file
;; offset, and the file offset is incremented by the number of bytes read.
;; If the file offset is at or past the end of file, no bytes are read, and
;; read returns zero.
;;
;; Finds and calls the read routine of the corresponding file driver.
;;
;; Input:
;; : a - file descriptor
;; : (de) - buffer
;; : hl - count
;;
;; Output:
;; : de - count
;; : a - errno
;Errors: 0=no error
;        1=invalid file descriptor

#local
    ;TODO limit count to size-offset
    ;TODO check permission

    push de ;buffer
    push hl ;count

    ;check if fd exists
    call fdToFileEntry
    jr c, invalidFd
    ld a, (hl)
    cp 00h
    jr z, invalidFd

    push hl
    pop ix
;    ld de, fileTableFiledriver
;    add ix, de

    ;check for valid file driver
    ld l, (ix + fileTableDriver)
    ld h, (ix + fileTableDriver + 1)
    and a
    ld de, 0
    sbc hl, de
    jr z, invalidDriver;NULL pointer
    ld de, file_read
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl

    pop bc ;count
    pop de ;buffer

    ;check if count > 0
    ld a, b
    cp 0
    jr nz, validCount
    ld a, c
    cp 0
    jr z, zeroCount
validCount:
    push ix
    ;push return address to stack
    push hl
    ld hl, return
    ex (sp), hl

    jp (hl)

return:
    pop ix
    push de
    ;add count to offset
    ld hl, regA
    call ld16 ;load count into reg32
    ld d, h
    ld e, l

    ld b, ixh
    ld c, ixl
    ld hl, fileTableOffset
    add hl, bc
    call add32

    pop de ;count
    xor a
    ret

invalidFd:
    pop hl
    pop hl
    ld a, 1
    ret
invalidDriver:
    pop hl
    pop hl
    ld a, 2
    ret
zeroCount:
    xor a
    ld de, 0
    ret
#endlocal

#+END_SRC

* Write
#+BEGIN_SRC asm
#code ROM

u_write:
    add a, fdTableEntries

k_write:
;; Write to an open file
;;
;; Finds and calls the write routine of the corresponding file driver.
;;
;; Input:
;; : a - file descriptor
;; : (de) - buffer
;; : hl - count
;;
;; Output:
;; : de - count
;; : a - errno
; Errors: 0=no error
;         1=invalid file descriptor
;         2=invalid file driver

#local
    push de ;buffer
    push hl ;count

    ;check if fd exists
    call fdToFileEntry
    jr c, invalidFd
    ld a, (hl)
    cp 0x00
    jr z, invalidFd

    push hl
    pop ix

    ;a still contains fileTable_mode
    bit M_APPEND_BIT, a
    jr z, skipAppend
    ;set offset to size hl size  de offset
    ld de, fileTableOffset
    add hl, de
    ld d, h
    ld e, l
    ld bc, fileTableSize-(fileTableOffset)
    add hl, bc
    call ld32

skipAppend:
    ;check for valid file driver
    ld l, (ix + fileTableDriver)
    ld h, (ix + fileTableDriver + 1)
    and a
    ld de, 0
    sbc hl, de
    jr z, invalidDriver;NULL pointer
    ld de, file_write
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl

    pop bc ;count
    pop de ;buffer

    ;check if count > 0
    ld a, b
    cp 0
    jr nz, validCount
    ld a, c
    cp 0
    jr z, zeroCount
validCount:

    ;call file driver
    jp (hl)

invalidFd:
    pop hl
    pop hl
    ld a, EBADF
    ret
invalidDriver:
    pop hl
    pop hl
    ld a, ENOTSUP
    ret
zeroCount:
    xor a
    ld de, 0
    ret
#endlocal

#+END_SRC

* Dup
#+BEGIN_SRC asm
#code ROM

u_dup:
    ld hl, u_fdTable
    ld c, fdTableEntries
    call dup
    ; e -= fdTableEntries
    push af
    ld a, e
    sub fdTableEntries
    ld e, a
    pop af
    ret

k_dup:
;; Duplicate a file descriptor.
;;
;; If `new fd` is equal to 0xFF, the next free file descriptor will be used.
;;
;; Input:
;; : a - new fd
;; : b - old fd
;;
;; Output:
;; : a - errno
;; : e - new fd

    ld hl, k_fdTable
    ld c, 0

dup:
;; Input:
;; : a - new fd
;; : b - old fd
;; : hl - base address of fd-table
;; : c - base fd
;;
;; Output:
;; : a - errno
;; : e - new fd

#local
    push af
    ld a, b
    ld (dup_oldFd), a
    pop af

    cp 0xff
    jr nz, newSpecified

    ld a, 0xff
    ld b, fdTableEntries
fdSearchLoop:
    cp (hl)
    jr z, newFdFound
    inc c
    inc hl
    djnz fdSearchLoop

    jr error

newFdFound:
    ld a, c
    ld (dup_newFd), a
    jr copyFd

newSpecified:
    ld (dup_newFd), a
    call getFdAddr
    jr c, error
    ld a, (hl)
    cp 0xff
    jr z, copyFd
    call k_close

copyFd:
    ld a, (dup_newFd)
    call getFdAddr
    push hl
    ld a, (dup_oldFd)
    call getFdAddr
    pop de
    jr c, error
    ;de - new fd, hl - old fd
    ld a, (hl)
    ld (de), a

    ;inc reference count
    ld a, (hl)
    call getFileAddr
    inc hl
    inc (hl)

    ld a, (dup_newFd)
    ld e, a

    xor a
    ret

error:
    ld a, 1
    ret
#endlocal

#data RAM
dup_oldFd: defs 1
dup_newFd: defs 1
#+END_SRC

* Readdir
#+BEGIN_SRC asm
#code ROM

u_readdir:
    add a, fdTableEntries

k_readdir:
;; Get information about the next file in a directory.
;;
;; Input:
;; : a - dirfd
;; : (de) - stat
;;
;; Output:
;; : a - errno

#local
    push af
    push de

    ;check if fd exists
    call fdToFileEntry
    jr c, invalidFd
    ld a, (hl)
    cp 0x00
    jr z, invalidFd

    push hl
    pop ix

    ;check if dirfd is a directory
    ld a, (ix + fileTableMode)
    and M_DIR
    jr z, error ;not a directory

    ;check for valid file driver
    ;get the drive table entry of the filesystem
    ld a, (ix + fileTableDriveNumber)
    ld h, 0 + (driveTable >> 8)
    ld l, a
    ;hl = drive entry
    ld de, driveTableFsdriver
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ;de = fsdriver
    ld hl, 0
    or a
    sbc hl, de
    jr z, error ;driver null pointer
    ld hl, fs_readdir
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl
    ;(hl) = routine

    pop de ;stat
    pop af ;fd

    jp (hl)

invalidFd:
error:
    pop de
    pop de
    ld a, 1
    ret
#endlocal

#+END_SRC

* Seek
#+BEGIN_SRC asm
#code ROM

u_lseek:
    add a, fdTableEntries
    jp k_lseek

u_seek:
    add a, fdTableEntries

k_seek:
;; Change the file offset of an open file using a 16-bit offset.
;;
;; The new offset is calculated according to whence as follows:
;;
;; * `SEEK_SET` : from start of file
;; * `SEEK_CUR` : from current location in positive direction
;; * `SEEK_END` : from end of file in positive direction
;;
;; Input:
;; : a - file descriptor
;; : de - offset
;; : h - whence
;;
;; Output:
;; : (de) - new offset from start of file
;; : a - errno

    push hl
    ld hl, regA
    call ld16
    ld d, h
    ld e, l
    pop hl


k_lseek:
;; Change the file offset of an open file using a 32-bit offset.
;;
;; The new offset is calculated according to whence as follows:
;;
;; * `SEEK_SET` : from start of file
;; * `SEEK_CUR` : from current location in positive direction
;; * `SEEK_END` : from end of file in positive direction
;;
;; Input:
;; : a - file descriptor
;; : (de) - offset
;; : h - whence
;;
;; Output:
;; : (de) - new offset from start of file
;; : a - errno
; Errors: 0=no error
;         1=invalid file descriptor
;         2=whence is invalid
;         3=the resulting offset would be invalid

#local
    push hl ;h = whence
    push de ;offset

    ;check if fd exists, get the address
    call fdToFileEntry
    pop de ;offset
    pop bc ;b = whence
    jp c, invalidFd
    ld a, (hl)
    cp 00h
    jp z, invalidFd
    ;hl=table entry addr

    push hl ;table entry
    push de ;offset

    ;check whence
    ld a, b
    cp SEEK_SET
    jr z, set
    cp SEEK_CUR
    jr z, cur
    cp SEEK_END
    jr z, end
    jr nz, invalidWhence


end:
    ld de, fileTableSize
    add hl, de
    ld de, seek_new
    call ld32
    jr addOffs

cur:
    ld de, fileTableOffset
    add hl, de
    ld de, seek_new
    call ld32
    jr addOffs

set:
    ld hl, seek_new
    call clear32

addOffs:
    ;new=new+offs
    ld hl, seek_new
    pop de ;offset
    call add32

    pop hl ;table entry

    ld de, fileTableOffset
    add hl, de
    ld a, (seek_new + 3)
    bit 7, a
    jr nz, invalidOffset
    push hl
    ld de, seek_new
    ex de, hl
    call ld32

    pop de
    xor a
    ret

    ;; TODO fix error numbers
invalidFd:
    ld a, 1
    ret
invalidWhence:
    ld a, 2
    ret
invalidOffset:
    ld a, 3
    ret
#endlocal


#data RAM
seek_new: defs 4

#+END_SRC

* Udup
#+BEGIN_SRC asm
#code ROM

udup:
;; Copy a kernel file descriptor to the user fd-table.
;;
;; If the user fd already exists, it will stay the same.
;;
;; Input:
;; : a - user fd
;; : b - kernel fd
;;
;; Output:
;; : a - errno

#local
    push af
    ld a, b
    call getFdAddr
    jr c, error
    ;hl = kernel fd addr
    pop af ;user fd
    add a, fdTableEntries
    push hl ;kernel fd addr
    call getFdAddr
    jr c, error
    pop de ;kernel fd addr
    ;hl = user fd addr

    ;check if user fd already exists
    ld a, (hl)
    cp 0xff
    ld a, 0
    ret nz

    ;copy fd
    ld a, (de)
    ld (hl), a
    ;inc reference count
    call getFileAddr
    inc hl
    inc (hl)

    xor a
    ret


error:
    pop af
    ld a, 1
    ret
#endlocal

#+END_SRC

* Unlink
#+BEGIN_SRC asm
u_unlink:

k_unlink:
;; Remove a file from the file system.
;;
;; Input:
;; : (de) - filename
;;
;; Output:
;; : a - errno

#local
    ld a, O_WRONLY
    call k_open
    cp 0
    ret nz
    ld a, e

    ;get file entry address
    call fdToFileEntry
    jr c, error
    ld a, (hl)
    cp 00h
    jr z, error

    push hl
    pop ix

    ld a, (ix + fileTableMode)
    bit M_DIR_BIT, a
    jr nz, error ;directories must be removed with rmdir

    ;check for valid file driver
    ;get the drive table entry of the filesystem
    ld a, (ix + fileTableDriveNumber)
    ld h, 0 + (driveTable >> 8)
    ld l, a
    ;hl = drive entry
    ld de, driveTableFsdriver
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ;de = fsdriver
    ld hl, 0
    or a
    sbc hl, de
    jr z, error ;driver null pointer
    ld hl, fs_unlink
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl
    ;(hl) = routine

    push ix ;file entry
    ld de, return
    push de

    jp (hl)

return:
    pop hl ;file entry
    cp 0
    jr nz, error

    ;clear file entry
    xor a
    ld b, fileTableEntrySize
clearEntry:
    ld (hl), a
    inc hl
    djnz clearEntry

    ;a = 0
    ret

error:
    ld a, 1
    ret
#endlocal

#+END_SRC

* Stat
#+BEGIN_SRC asm
#code ROM

u_stat:
k_stat:
;; Get information about a file.
;;
;; Input:
;; : (de) - filename
;; : (hl) - stat
;;
;; Output:
;; : a - errno

    push hl
    ld a, O_RDONLY
    call k_open
    cp 0
    ld a, e
    pop de ;stat
    ret nz

    push af
    call k_fstat
    pop af
    jp k_close


u_fstat:
    add a, fdTableEntries

k_fstat:
;; Get information about an open file.
;;
;; Input:
;; : a - fd
;; : (de) - stat
;;
;; Output:
;; : a - errno

#local
    push af
    push de

    ;check if fd exists
    call fdToFileEntry
    jr c, invalidFd
    ld a, (hl)
    cp 00h
    jr z, invalidFd

    push hl
    pop ix

    ;check for valid file driver
    ;get the drive table entry of the filesystem
    ld a, (ix + fileTableDriveNumber)
    ld h, 0 + (driveTable >> 8)
    ld l, a
    ;hl = drive entry
    ld de, driveTableFsdriver
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ;de = fsdriver
    ld hl, 0
    or a
    sbc hl, de
    jr z, error ;driver null pointer
    ld hl, fs_fstat
    add hl, de
    ld e, (hl)
    inc hl
    ld d, (hl)
    ex de, hl
    ;(hl) = routine

    pop de ;stat
    pop af ;fd

    jp (hl)

invalidFd:
error:
    pop de
    pop de
    ld a, 1
    ret
#endlocal

#+END_SRC
