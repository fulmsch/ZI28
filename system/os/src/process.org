#+TITLE: User process handling
#+PROPERTY: header-args :tangle yes

This is a mess and will need some major work.

#+BEGIN_SRC asm
#define process_fdTableEntries 8

#define process_max_argc        16
#define process_max_args_length 128


#define process_dataSection 0x8000
#define process_argString   0x8080
#define process_argVector   process_argString - ((process_max_argc * 2) + 2)
#define process_fdTable     process_argVector - process_fdTableEntries
#define process_pid         process_fdTable - 1
#define process_sp          process_pid - 2
#define process_bank        process_sp - 1

;PUBLIC exec

;EXTERN k_open, k_read, k_close, udup, u_close

;DEFC exec_addr = 0x8000

;exec:
;;; Loads a program file into memory and executes it.
;;;
;;; The file descriptors for input and output must be set before calling exec.
;;; All open file descriptors will be closed when the process is terminated.
;;;
;;; Input:
;;; : (de) - filename
;;; : (hl) - argv
;;;
;;; Output:
;;; : a - errno
;;; : hl - return code
;
;EXTERN k_execv
;    jp k_execv
;
;    push de
;    push hl
;
;    ;advance de to end of filename
;extLoop3:
;    ld a, (de)
;    inc de
;    cp 0x00
;    jr nz, extLoop3
;
;    dec de
;    ;de points to null terminator
;
;    ;check whether a file extension has been specified
;    ld b, 4
;extLoop0:
;    dec de
;    ld a, (de)
;    cp '.'
;    jr z, openFile
;    cp '/'
;    jr z, extLoop1
;    djnz extLoop0
;
;    ;no extension, add default executable one
;extLoop1:
;    inc de
;    ld a, (de)
;    cp 0x00
;    jr nz, extLoop1
;
;    ld hl, execExtension
;    call strcpy
;
;openFile:
;    pop hl
;    pop de
;
;    ;open file
;    ;(de) = filename
;    ld a, O_RDONLY
;    call k_open
;    cp 0
;    ret nz ;error opening the file
;    ld a, e
;    ld (exec_fd), a
;
;    ;TODO check magic number (binary/interpreted)
;
;    ;load file into memory
;    ld a, (exec_fd)
;    ld de, exec_addr
;    ld hl, 0x4000
;    call k_read ;TODO error checking
;
;    ;close file
;    ld a, (exec_fd)
;    call k_close
;
;    ;TODO setup for execution (argv, signals, interrupts, etc.)
;
;    ;set up standard streams
;    ld a, STDIN_FILENO
;    ld b, a
;    call udup ;STDIN
;
;    ld a, STDOUT_FILENO
;    ld b, a
;    call udup ;STDOUT
;
;    ld a, STDERR_FILENO
;    ld b, a
;    call udup ;STDERR
;
;    ;save the stack pointer
;    ld (exec_stack), sp
;
;    xor a
;
;    ;set new stack
;    ld sp, 0xa000
;
;    ;command line arguments TODO just temporary
;    ld a, (argc)
;    ld c, a
;    ld b, 0
;    ld hl, argv
;
;    call exec_addr
;
;    ;restore the stack pointer
;    ld sp, (exec_stack)
;
;    ;close all files
;    ld b, fdTableEntries
;closeFilesLoop:
;    ld a, b
;    dec a
;    push bc
;    call u_close
;    pop bc
;    djnz closeFilesLoop
;
;    ;clear the user fd-table just in case
;    ld hl, u_fdTable
;    ld de, u_fdTable + 1
;    ld bc, fdTableEntries - 1
;    ld (hl), 0xff
;    ldir
;
;    xor a
;    ret
;
;
;execExtension:
;    DEFM ".EX8", 0x00

#data RAM
;exec_fd: defs 1
;exec_stack: defs 2
kernel_stackSave: defs 2

#+END_SRC

* Execv
#+BEGIN_SRC asm
#code ROM

u_execv:
;; Execute a program.
;;
;; Input:
;; : (de) - path
;; : (hl) - argv
;;
;; Output:
;; : a - errno
;;
;; Errors:
;; : E2BIG - The argument list (argv) is too big.
;; : EACCES, EIO, ENFILE, ENAMETOOLONG, ENOENT, ENOTDIR

k_execv:

#local
    ld (execv_argv), hl
    ld (execv_path), de

    ;set up standard streams TODO temporary
    ld a, STDIN_FILENO
    ld b, a
    call udup ;STDIN

    ld a, STDOUT_FILENO
    ld b, a
    call udup ;STDOUT

    ld a, STDERR_FILENO
    ld b, a
    call udup ;STDERR


    ;copy each argument
    ld h, 0 ;count
    push hl
    ld hl, (execv_argv) ;count on stack, vector in hl
    ld de, execv_args

copyArguments:
    ld c, (hl)
    inc hl
    ld b, (hl)
    inc hl
    ex (sp), hl ;count in hl, vector on stack

    ;(bc) = argument
    ;check if null
    xor a
    cp c
    jr nz, copyArg
    cp b
    jr z, copyArgumentsEnd

copyArg:
;; Input:
;; : (bc) - source
;; : (de) - destination
    ld a, process_max_args_length
    inc h
    cp h
    jr z, argLengthError ;argument string too long
    ld a, (bc)
    ld (de), a
    cp 0x00
    inc bc
    inc de
    jr nz, copyArg

    ex (sp), hl ;count on stack, vector in hl
    jr copyArguments


copyArgumentsEnd:
    pop hl ;clear stack
    xor a
    ld (de), a ;terminate argument string

;count arguments
    ld hl, execv_args
    ld d, a ;0
    cp (hl)
    jr z, countArgumentsEnd

countArguments:
    inc d
    call strlen
    inc hl
    cp (hl) ;a is 0 after strlen
    jr nz, countArguments

countArgumentsEnd:
    ;d = argc
    ld a, d
    cp process_max_argc + 1
    jr nc, argCountError
    ld (execv_argc), a




    ;open file
    ld de, (execv_path)
    ld a, O_RDONLY
    call k_open
    cp 0
    ret nz ;error opening the file
    ld a, e

    ;TODO check not dir
    ;TODO check magic number (binary/interpreted)

    push af
    ;load file into memory
    ld de, MEM_user
    ld hl, MEM_user_top - MEM_user
    call k_read ;TODO error checking

    ;close file
    pop af
    call k_close



    ;copy argument string to program data section
    ld hl, execv_args
    ld de, process_argString
    ld bc, process_max_args_length
    ldir

    ;build argv
    ld de, process_argVector
    ld hl, process_argString
    xor a

generateArgv:
    cp (hl)
    jr z, argvEnd
    ld a, l
    ld (de), a
    inc de
    ld a, h
    ld (de), a
    inc de
    call strlen
    inc hl
    jr generateArgv

argvEnd:
    ;terminate argv
    ld (de), a
    inc de
    ld (de), a


    ld (kernel_stackSave), sp
    ld sp, MEM_user_top
    ;push addr of exit so that the program can terminate with a ret
    ld bc, u_exit
    push bc
    ld bc, (execv_argc)
    ld b, 0
    ld hl, process_argVector
    jp MEM_user


argLengthError:
    pop hl
argCountError:
    ld a, E2BIG
    ret
#endlocal

#data RAM
execv_path: defs 2
execv_argv: defs 2
execv_argc: defs 1
execv_args: defs process_max_args_length
#+END_SRC

* Exit
#+BEGIN_SRC asm
#code ROM

u_exit:
;; Terminate the current process and return control to the parent.
;;
;; Input:
;; : a - exit status

;needs to return the following for fork:
; a = 1
; e - exit code of terminating process

;TODO what to do if trying to exit pid 1?
; - reboot the system
; - display reboot prompt
; - drop to kernel shell
; - halt the system / panic

    ld (exit_returnCode), a

;restore sp
    ld sp, (kernel_stackSave)

;TODO close all fds

    ld a, 0x08
    out (BANKSEL_PORT), a

    ld a, (exit_returnCode)
    ld e, a
    xor a
    ret

#data RAM
exit_returnCode:
    DEFB 0
#+END_SRC
