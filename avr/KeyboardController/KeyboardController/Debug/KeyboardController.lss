
KeyboardController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000017d  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000117  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e6  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dc  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000074  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a5 36       	cpi	r26, 0x65	; 101
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	41 d0       	rcall	.+130    	; 0xc2 <main>
  40:	63 c0       	rjmp	.+198    	; 0x108 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_2>:

volatile uint8_t inputRegister;
volatile uint8_t outputRegister[4] = {0, 0, 0, 0};


ISR(INT1_vect) {
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	ef 93       	push	r30
  52:	ff 93       	push	r31
	uint8_t address = PIND & 0b00000011;
  54:	e0 b3       	in	r30, 0x10	; 16
  56:	e3 70       	andi	r30, 0x03	; 3
	if(PINA & (1 << RDWR_PIN)) {
  58:	c8 9b       	sbis	0x19, 0	; 25
  5a:	11 c0       	rjmp	.+34     	; 0x7e <__vector_2+0x3a>
		//Z80 read
		if(!address) PORTA |= (1 << NMI_PIN);
  5c:	e1 11       	cpse	r30, r1
  5e:	01 c0       	rjmp	.+2      	; 0x62 <__vector_2+0x1e>
  60:	d9 9a       	sbi	0x1b, 1	; 27
		DDRB = 0xFF;
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	87 bb       	out	0x17, r24	; 23
		PORTB = outputRegister[address];
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	e0 5a       	subi	r30, 0xA0	; 160
  6a:	ff 4f       	sbci	r31, 0xFF	; 255
  6c:	80 81       	ld	r24, Z
  6e:	88 bb       	out	0x18, r24	; 24
		PORTD |= (1 << WAIT_PIN);
  70:	96 9a       	sbi	0x12, 6	; 18
		_NOP();
  72:	00 00       	nop
		PORTD &= !(1 << WAIT_PIN);
  74:	82 b3       	in	r24, 0x12	; 18
  76:	12 ba       	out	0x12, r1	; 18
		DDRB = 0;
  78:	17 ba       	out	0x17, r1	; 23
		PORTB = 0;
  7a:	18 ba       	out	0x18, r1	; 24
  7c:	1a c0       	rjmp	.+52     	; 0xb2 <__vector_2+0x6e>
	}
	else {
		//Z80 write
		inputRegister = PINB;
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	80 93 64 00 	sts	0x0064, r24
		PORTD |= (1 << WAIT_PIN);
  84:	96 9a       	sbi	0x12, 6	; 18
		_NOP();
  86:	00 00       	nop
		PORTD &= !(1 << WAIT_PIN);
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	12 ba       	out	0x12, r1	; 18
		switch(address) {
  8c:	e2 30       	cpi	r30, 0x02	; 2
  8e:	49 f0       	breq	.+18     	; 0xa2 <__vector_2+0x5e>
  90:	e3 30       	cpi	r30, 0x03	; 3
  92:	61 f0       	breq	.+24     	; 0xac <__vector_2+0x68>
  94:	e1 30       	cpi	r30, 0x01	; 1
  96:	69 f4       	brne	.+26     	; 0xb2 <__vector_2+0x6e>
			case 1:
				outputRegister[1] = inputRegister;
  98:	80 91 64 00 	lds	r24, 0x0064
  9c:	80 93 61 00 	sts	0x0061, r24
				break;
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <__vector_2+0x6e>
			case 2:
				TCCR0B = inputRegister & 0b00000111;
  a2:	80 91 64 00 	lds	r24, 0x0064
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	83 bf       	out	0x33, r24	; 51
				break;
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <__vector_2+0x6e>
			case 3:
				OCR0A = inputRegister;
  ac:	80 91 64 00 	lds	r24, 0x0064
  b0:	86 bf       	out	0x36, r24	; 54
				break;
			default:
				break;
		}
	}
}
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <main>:

int main(void)
{
	//Initialize INT1
	MCUCR |= (1 << ISC11);
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT1);
  c8:	8b b7       	in	r24, 0x3b	; 59
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8b bf       	out	0x3b, r24	; 59
	
	//Initialize Timer 0
	TCCR0A |= (1 << COM0B0) | (1 << WGM01);
  ce:	80 b7       	in	r24, 0x30	; 48
  d0:	82 61       	ori	r24, 0x12	; 18
  d2:	80 bf       	out	0x30, r24	; 48
	
	DDRD |= (1 << SPKR_PIN) | (1 << WAIT_PIN);
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 66       	ori	r24, 0x60	; 96
  d8:	81 bb       	out	0x11, r24	; 17
	DDRA |= (1 << NMI_PIN);
  da:	d1 9a       	sbi	0x1a, 1	; 26
	PORTA |= (1 << RDWR_PIN);
  dc:	d8 9a       	sbi	0x1b, 0	; 27
	PORTD |= (1 << CE_PIN);
  de:	93 9a       	sbi	0x12, 3	; 18
	sei();
  e0:	78 94       	sei
	
	//Main loop
    while (1) {
		if (outputRegister[1]) {
  e2:	e0 e6       	ldi	r30, 0x60	; 96
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	81 81       	ldd	r24, Z+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	e9 f3       	breq	.-6      	; 0xe6 <__stack+0x7>
			outputRegister[0]++;
  ec:	80 81       	ld	r24, Z
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
			PORTA &= ~(1 << NMI_PIN);
  f2:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	89 e6       	ldi	r24, 0x69	; 105
  f8:	98 e1       	ldi	r25, 0x18	; 24
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <__stack+0x1b>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__stack+0x25>
 104:	00 00       	nop
 106:	ef cf       	rjmp	.-34     	; 0xe6 <__stack+0x7>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
